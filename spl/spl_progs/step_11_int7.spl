//Name : Sooraj Tom, 111501036
//Date : 21-09-2017
//Step : 11 Interrupt 7

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if ( sysCallNo == 10) then            //Exit system call
	alias i S2;
	alias nextready S3;
	alias ftindex S4;
	alias sysopft S5;
	alias pcbadd S6;
	alias currentpid S7;
	
	currentpid = ((PTBR - PAGE_TABLE) / 8);
	nextready = -1;
	
	i = (currentpid + 1) % 32;
	while(i != currentpid)do                             //Searching for a ready process
		if(([READY_LIST + (i * 32) + 1] == 1) && (nextready == -1))then
			nextready = i;
		endif;
		if([READY_LIST + (i * 32) + 1] == 100 + currentpid)then  //If the process is waiting for the exiting process
			[READY_LIST + (i * 32) + 1] = 1;                     //The process state is set to be running
			if(nextready == -1) then
				nextready = i;
			endif;
		endif;
		i = (i + 1) % 32;
	endwhile;
	
	if( nextready == -1 )then                          //No process found ready
		halt;
	endif;
	
	pcbadd = READY_LIST + (32 * currentpid);      //Obtaining the PCB of current process
	
	ftindex = 0;
	
	while(ftindex < 8)do                               //Closing files opened by the process
		if([pcbadd + 15 + (ftindex * 2)] > -1)then
			sysopft = [pcbadd + 15 + (ftindex * 2)];
			sysopft = FILE_TABLE + sysopft * 2;
			if([sysopft + 1] == 1) then                //The file is open only by one process
				[sysopft + 1] = 0;
				[sysopft] = -1;
			else
				[sysopft + 1] = [sysopft + 1] - 1;     //Decrementing the open count for the file
			endif;
			[pcbadd + 15 + (ftindex * 2)] = -1;        //Invalidating the per-process open file table entry
			[pcbadd + 15 + (ftindex * 2) + 1] = 0;
		endif;
		ftindex = ftindex + 1;
	endwhile;
	
	[pcbadd + 1] = 0;                               //State is set to be terminated
	
	i = 0;
	while(i < 4)do                                   //Freeing memory pages allocated to the process
		if([PTBR + (i * 2) + 1]%10 == "1")then       //On seeing a valid page
			[PTBR + (i * 2) + 1] = "00";
			[MEM_LIST + [PTBR + (i * 2)]] = 0;
			[PTBR + (i * 2)] = -1;
		endif;
		i = i + 1;
	endwhile;
	
	/////////////Deploying the next ready process//////////////////
	
	alias nextPCB S7;
	nextPCB = READY_LIST + (nextready * 32);
	[ nextPCB + 1 ] = 2;                                //Set STATE Value to RUNNING
	BP =  [ nextPCB + 2 ];
	SP =  [ nextPCB + 3 ] + 1;
	PTBR = [ nextPCB + 5 ];
	physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[ physicalSP ] = [ nextPCB + 4 ];   //Storing IP value to the top of stack
	PTLR = [ nextPCB + 6 ];
	R0 = [ nextPCB + 7 ];
	R1 = [ nextPCB + 8 ];
	R2 = [ nextPCB + 9 ];
	R3 = [ nextPCB + 10 ];
	R4 = [ nextPCB + 11 ];
	R5 = [ nextPCB + 12 ];
	R6 = [ nextPCB + 13 ];
	R7 = [ nextPCB + 14 ];	
	ireturn;
else
	if ( sysCallNo == 13) then            //Wait system call
		alias WaitingPID S2;
		alias wpcbaddr S3;
		alias cpcbaddr S4;
		alias cpid S5;
		alias nextPCB S6;
		WaitingPID = [physicalSP - 3];
		
		if((WaitingPID < 0) || (WaitingPID > 31))then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		
		wpcbaddr = READY_LIST + (WaitingPID * 32);
		if(([wpcbaddr + 1] == 0) || ([wpcbaddr + 1] == 2))then    //If the process is terminated or running
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		
		cpid = (PAGE_TABLE - PTBR)/8;
		cpcbaddr = READY_LIST + (cpid * 32);
		
		[cpcbaddr + 1] = 100 + WaitingPID;              //Setting the status of the current process as waiting
		[ cpcbaddr + 2 ] = BP;     // Saving the base pointer
		[ cpcbaddr + 3 ] = SP - 1; //Saving Stack pointer
		[ cpcbaddr + 4 ] = [physicalSP]; //Saving current IP value from SP
		[ cpcbaddr + 5 ] = PTBR;
		[ cpcbaddr + 6 ] = PTLR ;
		[ cpcbaddr + 7 ] = R0;
		[ cpcbaddr + 8 ] = R1;
		[ cpcbaddr + 9 ] = R2;
		[ cpcbaddr + 10 ] = R3;
		[ cpcbaddr + 11 ] = R4;
		[ cpcbaddr + 12 ] = R5;
		[ cpcbaddr + 13 ] = R6;
		[ cpcbaddr + 14 ] = R7;
		
		[physicalSP - 2] = 0;
		
		cpid = (cpid + 1) % 32;
		while(1 == 1)do                             //Searching for a ready process
			if([READY_LIST + (cpid * 32) + 1] == 1)then
				break;
			endif;
			cpid = (cpid + 1) % 32;
		endwhile;
		
		nextPCB = READY_LIST + ((cpid) * 32);
		
		[ nextPCB + 1 ] = 2;  //Set STATE Value to RUNNING
		BP =  [ nextPCB + 2 ];
		SP =  [ nextPCB + 3 ] + 1;
		PTBR = [ nextPCB + 5 ];
		physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
		[ physicalSP ] = [ nextPCB + 4 ];   //Storing IP value to the top of stack
		PTLR = [ nextPCB + 6 ];
		R0 = [ nextPCB + 7 ];
		R1 = [ nextPCB + 8 ];
		R2 = [ nextPCB + 9 ];
		R3 = [ nextPCB + 10 ];
		R4 = [ nextPCB + 11 ];
		R5 = [ nextPCB + 12 ];
		R6 = [ nextPCB + 13 ];
		R7 = [ nextPCB + 14 ];
		
		ireturn;
	else
		if ( sysCallNo == 14) then            //Signal system call
			alias i S2;
			alias currpid S3;
			
			currpid = ((PTBR - PAGE_TABLE) / 8);
			
			i = 0;
			while(i < 32)do
				if([READY_LIST + (i * 32) + 1] == 100 + currpid)then
					[READY_LIST + (i * 32) + 1] = 1;
				endif;
				i = i + 1;
			endwhile;
			ireturn;
		endif;
	endif;
endif;
