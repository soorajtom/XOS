//Name : Sooraj Tom, 111501036
//Date : 05-10-2017
//Step : 10 Exception handler

alias Cause S5;
alias VPagenum S6;
alias Ip_addr S7;
alias i S8;
alias freepage S9;
alias currentp S10;
alias phypage S11;
alias counter S12;

Cause = EFR % 10;	             	// Gets value of cause field (size 1 char)
VPagenum = (EFR / 10) % 100;        // Gets value of BadVAddr 
Ip_addr = (EFR/1000);		        //Gets value of IP at the point of exception

if (Cause == 0)then

	if([PTBR + VPagenum*2 + 1] == -1)then
		SP = SP + 2;
		[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512) - 1] = 10;
		inline "JMP 11776";    //Jumping to exit
	endif;
	
	i = 25;
	freepage = -1;
	while (i < 64)do
		if([MEM_LIST + i] == 0)then
			freepage = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	
	currentp = (PTBR - PAGE_TABLE) / 8;
	
	
	counter = 0;
	if(freepage == -1)then
		i = ((currentp + 1) * 8) % 128;
		while(counter < 256)do
			if((i + 2)%8 != 0)then                          //ignoring stack pages
				if(([PAGE_TABLE + i + 1] == "01") && ([MEM_LIST + [PAGE_TABLE + i]] == 1))then    //reference bit is 0
					phypage = 448;
					while(phypage < 512)do
						if([DISK_LIST + phypage] == 0)then
							break;
						endif;
						phypage = phypage + 1;
					endwhile;
					if(phypage == 512)then
						SP = SP + 2;
						[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512) - 1] = 10;
						inline "JMP 11776";    //Jumping to exit
					endif;
					store([PAGE_TABLE + i], phypage);                    //Storing the page into disk
					
					[DISK_LIST + phypage] = [DISK_LIST + phypage] + 1;
					
					freepage = [PAGE_TABLE + i];
					
					[PAGE_TABLE + i] = phypage;                        //Setting the page table entry for victim page
					[PAGE_TABLE + i + 1] = "00";
					
					[MEM_LIST + freepage] = [MEM_LIST + freepage] - 1;   
					
					store(6, 20);                                      //Storing disk-free list back into disk
					
					break;					
				else
					if ([PAGE_TABLE + i + 1] == "11") then
						[PAGE_TABLE + i + 1] = "01";  
					endif;
				endif;
			endif;
			i = (i + 2) % 256;                                //32 processes * 4 pages per page * 2
			counter = counter + 1;
		endwhile;
	endif;
	
	if(freepage == -1)then
		SP = SP + 2;
		[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512) - 1] = 10;
		print("ExNomoreSwitches");
		inline "JMP 11776";    //Jumping to exit
	endif;
	
	load (freepage, [PTBR + VPagenum*2]);                      //loading the page from disk to memory
	[MEM_LIST + freepage] = [MEM_LIST + freepage] + 1;
	
	
	if(([PTBR + VPagenum*2] >= 448) && ([PTBR + VPagenum*2] < 512))then
		[DISK_LIST + [PTBR + VPagenum*2]] = [DISK_LIST + [PTBR + VPagenum*2]] - 1;
	endif;
	
	[PTBR + VPagenum*2] = freepage;
	[PTBR + VPagenum*2 + 1] = "11";
	
	SP = SP + 1;
	[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512)] = Ip_addr;
	
	ireturn;
	
else
	print("Cause:");
	if(Cause == 1)then
		print("IllegalInstrn");
	endif;
	if(Cause == 2)then
		print("IllegalMem-acc");
	endif;
	if(Cause == 3)then
		print("ArithmeticExc");
	endif;
	if(Cause == 4)then
		print("IllegalOperand");
	endif;
	print("VPagenum");
	print(VPagenum);
	print("Ip_addr");
	print(Ip_addr);
	breakpoint;
	SP = SP + 2;
	[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512) - 1] = 10;
	inline "JMP 11776";    //Jumping to exit
	ireturn;
endif;

